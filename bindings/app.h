#ifndef APP_H
#define APP_H

#include <QObject>

typedef void Holochain;
typedef void Dna;

//! Wrapper for a Rust-based Holochain instance
/*!
 * This serves as a bridge between our Holochain library written in Rust
 * and Qt-based scripting contexts like QML or JavaScript.
 *
 * Basically just a wrapper.
 *
 * Might be replaced by code automatically generated by
 * https://github.com/KDE/rust-qt-binding-generator/
 * in the future.
 */
class App : public QObject
{
    Q_OBJECT
public:
    App();
    explicit App(QString hash, QString storage_path, QObject *parent = nullptr);
    explicit App(Dna* dna, QString storage_path, QObject *parent = nullptr);
    Q_INVOKABLE void start();
    Q_INVOKABLE void stop();
    Q_INVOKABLE QString call(QString zome, QString capability, QString function, QString parameters);
    Q_INVOKABLE QStringList zome_names();
    Q_INVOKABLE QStringList capabilities_for_zome(QString zome);
    Q_INVOKABLE QStringList functions_for_zome_capability(QString zome, QString capability);
    Q_INVOKABLE QStringList parameter_names(QString zome, QString capability, QString function);
    Q_INVOKABLE QString hash() const;
    Q_INVOKABLE QString name() const;
    static App* load(QString hash, QString storage_path);

signals:

public slots:

private:
    Holochain* m_instance;
    Dna* m_dna;
    QString m_hash;
};

Q_DECLARE_METATYPE(App*)

#endif // APP_H
